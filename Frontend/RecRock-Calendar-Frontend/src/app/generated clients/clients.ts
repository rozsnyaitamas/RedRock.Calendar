//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:6600";
    }

    async get(): Promise<UserDTO[]> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
      return await this.processGet(_response);
    }

    protected async processGet(response: Response): Promise<UserDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            const _responseText = await response.text();
          let result200: any = null;
          result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserDTO[];
          return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText_1 = await response.text();
          return throwException("An unexpected server error occurred.", status, _responseText_1, _headers);
        }
        return Promise.resolve<UserDTO[]>(null as any);
    }

    async getById(id: string | null): Promise<UserDTO> {
        let url_ = this.baseUrl + "/api/Users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
      return await this.processGetById(_response);
    }

    protected async processGetById(response: Response): Promise<UserDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            const _responseText = await response.text();
          let result200: any = null;
          result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as UserDTO;
          return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText_1 = await response.text();
          return throwException("An unexpected server error occurred.", status, _responseText_1, _headers);
        }
        return Promise.resolve<UserDTO>(null as any);
    }
}

export interface UserDTO {
    id: string;
    fullName: string;
    userName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
